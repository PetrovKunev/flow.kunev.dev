@model IEnumerable<FlowKunevDev.Services.DTOs.PlannedTransactionSummaryDto>

@{
    ViewData["Title"] = "Просрочени Планирани Транзакции";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <i class="fas fa-exclamation-triangle text-warning"></i>
        @ViewData["Title"]
    </h2>
    <div class="btn-group">
        <a asp-action="Index" class="btn btn-outline-primary">
            <i class="fas fa-list"></i> Всички
        </a>
        <a asp-action="Upcoming" class="btn btn-outline-info">
            <i class="fas fa-calendar-day"></i> Предстоящи
        </a>
        <a asp-action="Create" class="btn btn-success">
            <i class="fas fa-plus"></i> Нова планирана
        </a>
    </div>
</div>

@if (Model.Any())
{
    <!-- Предупредителен alert -->
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>Внимание!</strong> Имате <strong>@Model.Count()</strong> просрочени планирани транзакции.
        Препоръчваме да ги прегледате и изпълните или откажете.
        <br><small class="mt-2 d-block">
            Общо просрочена сума:
            <span class="fw-bold text-success">+@Model.Where(t => t.Type == FlowKunevDev.Common.TransactionType.Income).Sum(t => t.PlannedAmount).ToString("F2") лв.</span> |
            <span class="fw-bold text-danger">-@Model.Where(t => t.Type == FlowKunevDev.Common.TransactionType.Expense).Sum(t => t.PlannedAmount).ToString("F2") лв.</span>
        </small>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>

    <!-- Статистики -->
    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card border-warning">
                <div class="card-body text-center">
                    <div class="display-6 text-warning">@Model.Count()</div>
                    <h6 class="card-title text-warning">Просрочени</h6>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card border-danger">
                <div class="card-body text-center">
                    <div class="display-6 text-danger">@Model.Where(p => Math.Abs(p.DaysUntilDue) > 7).Count()</div>
                    <h6 class="card-title text-danger">Над 7 дни</h6>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card border-success">
                <div class="card-body text-center">
                    <div class="display-6 text-success">@Model.Count(p => p.Type == FlowKunevDev.Common.TransactionType.Income)</div>
                    <h6 class="card-title text-success">Приходи</h6>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card border-danger">
                <div class="card-body text-center">
                    <div class="display-6 text-danger">@Model.Count(p => p.Type == FlowKunevDev.Common.TransactionType.Expense)</div>
                    <h6 class="card-title text-danger">Разходи</h6>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">Бързи действия</h6>
                </div>
                <div class="card-body text-center">
                    <button type="button" class="btn btn-success btn-sm mb-2" onclick="executeAllOverdue()">
                        <i class="fas fa-play-circle"></i> Изпълни всички
                    </button>
                    <br>
                    <button type="button" class="btn btn-warning btn-sm" onclick="cancelAllOverdue()">
                        <i class="fas fa-ban"></i> Откажи всички
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Сортиране и филтри -->
    <div class="card mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-sort"></i> Сортиране и филтри
                </h6>
                <div class="btn-group btn-group-sm" role="group">
                    <input type="radio" class="btn-check" name="sortOptions" id="sortByDate" autocomplete="off" checked>
                    <label class="btn btn-outline-primary" for="sortByDate">По дата</label>

                    <input type="radio" class="btn-check" name="sortOptions" id="sortByAmount" autocomplete="off">
                    <label class="btn btn-outline-primary" for="sortByAmount">По сума</label>

                    <input type="radio" class="btn-check" name="sortOptions" id="sortByDays" autocomplete="off">
                    <label class="btn btn-outline-primary" for="sortByDays">По просрочие</label>
                </div>
            </div>
        </div>
    </div>

    <!-- Списък с просрочени транзакции -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="overdueTable">
                    <thead class="table-warning">
                        <tr>
                            <th>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                </div>
                            </th>
                            <th>Описание</th>
                            <th>Сума</th>
                            <th>Планирана дата</th>
                            <th>Дни просрочие</th>
                            <th>Категория</th>
                            <th>Сметка</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var planned in Model.OrderBy(p => p.PlannedDate))
                        {
                            <tr class="table-warning" data-id="@planned.Id" data-amount="@planned.PlannedAmount" data-days="@Math.Abs(planned.DaysUntilDue)">
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input transaction-checkbox" type="checkbox" value="@planned.Id">
                                    </div>
                                </td>
                                <td>
                                    <div class="fw-bold">@planned.Description</div>
                                    @if (Math.Abs(planned.DaysUntilDue) > 30)
                                    {
                                        <span class="badge bg-danger">
                                            <i class="fas fa-exclamation-circle"></i> Критично просрочена
                                        </span>
                                    }
                                    else if (Math.Abs(planned.DaysUntilDue) > 14)
                                    {
                                        <span class="badge bg-warning text-dark">
                                            <i class="fas fa-exclamation-triangle"></i> Много просрочена
                                        </span>
                                    }
                                </td>
                                <td>
                                    <span class="fw-bold text-@(planned.Type == FlowKunevDev.Common.TransactionType.Income ? "success" : "danger")">
                                        @(planned.Type == FlowKunevDev.Common.TransactionType.Income ? "+" : "-")@planned.PlannedAmount.ToString("F2") лв.
                                    </span>
                                </td>
                                <td>
                                    <div>@planned.PlannedDate.ToString("dd.MM.yyyy")</div>
                                    <small class="text-muted">@planned.PlannedDate.ToString("dddd", new System.Globalization.CultureInfo("bg-BG"))</small>
                                </td>
                                <td>
                                    <span class="badge bg-danger fs-6">
                                        <i class="fas fa-calendar-times"></i>
                                        @Math.Abs(planned.DaysUntilDue) дни
                                    </span>
                                </td>
                                <td>
                                    <span class="badge rounded-pill" style="background-color: @planned.CategoryColor; color: white;">
                                        @planned.CategoryName
                                    </span>
                                </td>
                                <td>
                                    <small class="text-muted">@planned.AccountName</small>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a asp-action="Details" asp-route-id="@planned.Id" class="btn btn-outline-primary" title="Детайли">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button type="button" class="btn btn-success"
                                                onclick="executeTransaction(@planned.Id, '@planned.Description', @planned.PlannedAmount)"
                                                title="Изпълни">
                                            <i class="fas fa-play"></i>
                                        </button>
                                        <button type="button" class="btn btn-warning"
                                                onclick="cancelTransaction(@planned.Id, '@planned.Description')"
                                                title="Откажи">
                                            <i class="fas fa-times"></i>
                                        </button>
                                        <a asp-action="Edit" asp-route-id="@planned.Id" class="btn btn-outline-secondary" title="Редактирай">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Масови действия -->
            <div class="mt-3 border-top pt-3" id="bulkActions" style="display: none;">
                <div class="d-flex justify-content-between align-items-center">
                    <span class="text-muted">
                        <span id="selectedCount">0</span> избрани транзакции
                    </span>
                    <div class="btn-group">
                        <button type="button" class="btn btn-success btn-sm" onclick="executeSelected()">
                            <i class="fas fa-play"></i> Изпълни избраните
                        </button>
                        <button type="button" class="btn btn-warning btn-sm" onclick="cancelSelected()">
                            <i class="fas fa-times"></i> Откажи избраните
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="fas fa-check-circle fa-4x mb-4 text-success"></i>
            <h4 class="text-success">Отлично! Нямате просрочени транзакции</h4>
            <p class="text-muted mb-4">
                Всички ваши планирани транзакции са актуални и в срок.
                <br>Продължавайте да управлявате финансите си ефективно!
            </p>
            <div class="btn-group">
                <a asp-action="Upcoming" class="btn btn-info">
                    <i class="fas fa-calendar-day"></i> Вижте предстоящите транзакции
                </a>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Създайте нова планирана
                </a>
            </div>
        </div>
    </div>
}

<!-- Modal за изпълнение -->
<div class="modal fade" id="executeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-play"></i> Изпълни просрочена транзакция
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="executeForm" method="post">
                <div class="modal-body">
                    <input type="hidden" id="executeId" name="id" />

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Просрочена транзакция</strong><br>
                        <div class="fw-bold" id="executeDescription"></div>
                        <div>Планирана сума: <span class="fw-bold" id="executePlannedAmount"></span></div>
                    </div>

                    <div class="mb-3">
                        <label for="actualAmount" class="form-label">Реална сума</label>
                        <div class="input-group">
                            <input type="number" step="0.01" class="form-control" name="actualAmount" />
                            <span class="input-group-text">лв.</span>
                        </div>
                        <small class="text-muted">Оставете празно за планираната сума</small>
                    </div>

                    <div class="mb-3">
                        <label for="actualDate" class="form-label">Дата на изпълнение</label>
                        <input type="date" class="form-control" name="actualDate" value="@FlowKunevDev.Common.TimeHelper.LocalNow.ToString("yyyy-MM-dd")" />
                        <small class="text-muted">По подразбиране е днешната дата</small>
                    </div>

                    <div class="mb-3">
                        <label for="actualNotes" class="form-label">Бележки за закъснението</label>
                        <textarea class="form-control" name="actualNotes" rows="2" placeholder="Причина за закъснението или други бележки..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Откажи</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-check"></i> Изпълни транзакцията
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal за отказване -->
<div class="modal fade" id="cancelModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-ban"></i> Отказване на просрочена транзакция
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Просрочена транзакция</strong><br>
                    <div class="fw-bold" id="cancelDescription"></div>
                </div>
                <p>Сигурни ли сте, че искате да откажете тази просрочена транзакция?</p>
                <p class="text-muted">Тя няма да бъде изпълнена и ще бъде маркирана като отказана.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Не, запази я</button>
                <form id="cancelForm" method="post" style="display: inline;">
                    <input type="hidden" id="cancelId" name="id" />
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-ban"></i> Да, откажи я
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function executeTransaction(id, description, plannedAmount) {
            document.getElementById('executeId').value = id;
            document.getElementById('executeDescription').textContent = description;
            document.getElementById('executePlannedAmount').textContent = plannedAmount.toFixed(2) + ' лв.';
            document.getElementById('executeForm').action = '@Url.Action("Execute")';
            new bootstrap.Modal(document.getElementById('executeModal')).show();
        }

        function cancelTransaction(id, description) {
            document.getElementById('cancelId').value = id;
            document.getElementById('cancelDescription').textContent = description;
            document.getElementById('cancelForm').action = '@Url.Action("Cancel")';
            new bootstrap.Modal(document.getElementById('cancelModal')).show();
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.transaction-checkbox');

            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });

            updateBulkActions();
        }

        function updateBulkActions() {
            const selectedCheckboxes = document.querySelectorAll('.transaction-checkbox:checked');
            const bulkActions = document.getElementById('bulkActions');
            const selectedCount = document.getElementById('selectedCount');

            selectedCount.textContent = selectedCheckboxes.length;

            if (selectedCheckboxes.length > 0) {
                bulkActions.style.display = 'block';
            } else {
                bulkActions.style.display = 'none';
            }
        }

        function executeSelected() {
            const selectedIds = Array.from(document.querySelectorAll('.transaction-checkbox:checked'))
                                   .map(cb => cb.value);

            if (selectedIds.length === 0) {
                alert('Моля изберете поне една транзакция.');
                return;
            }

            if (confirm(`Сигурни ли сте, че искате да изпълните ${selectedIds.length} транзакции?`)) {
                // Тук можеш да добавиш AJAX заявка за масово изпълнение
                executeMultipleTransactions(selectedIds);
            }
        }

        function cancelSelected() {
            const selectedIds = Array.from(document.querySelectorAll('.transaction-checkbox:checked'))
                                   .map(cb => cb.value);

            if (selectedIds.length === 0) {
                alert('Моля изберете поне една транзакция.');
                return;
            }

            if (confirm(`Сигурни ли сте, че искате да откажете ${selectedIds.length} транзакции?`)) {
                // Тук можеш да добавиш AJAX заявка за масово отказване
                cancelMultipleTransactions(selectedIds);
            }
        }

        function executeAllOverdue() {
            const allIds = Array.from(document.querySelectorAll('.transaction-checkbox'))
                              .map(cb => cb.value);

            if (confirm(`Сигурни ли сте, че искате да изпълните ВСИЧКИ ${allIds.length} просрочени транзакции?`)) {
                executeMultipleTransactions(allIds);
            }
        }

        function cancelAllOverdue() {
            const allIds = Array.from(document.querySelectorAll('.transaction-checkbox'))
                              .map(cb => cb.value);

            if (confirm(`Сигурни ли сте, че искате да откажете ВСИЧКИ ${allIds.length} просрочени транзакции?`)) {
                cancelMultipleTransactions(allIds);
            }
        }

        function executeMultipleTransactions(ids) {
            // AJAX заявка за масово изпълнение
            fetch('@Url.Action("ExecuteMultiple")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ ids: ids })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Успешно изпълнени ${data.count} транзакции!`);
                    location.reload();
                } else {
                    alert('Грешка при изпълнението: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Възникна грешка при изпълнението.');
            });
        }

        function cancelMultipleTransactions(ids) {
            // AJAX заявка за масово отказване
            fetch('@Url.Action("CancelMultiple")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ ids: ids })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Успешно отказани ${data.count} транзакции!`);
                    location.reload();
                } else {
                    alert('Грешка при отказването: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Възникна грешка при отказването.');
            });
        }

        function sortTable(criteria) {
            const table = document.getElementById('overdueTable');
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);

            rows.sort((a, b) => {
                let aVal, bVal;

                switch(criteria) {
                    case 'date':
                        aVal = new Date(a.cells[3].textContent.trim());
                        bVal = new Date(b.cells[3].textContent.trim());
                        return aVal - bVal;
                    case 'amount':
                        aVal = parseFloat(a.dataset.amount);
                        bVal = parseFloat(b.dataset.amount);
                        return bVal - aVal; // Descending
                    case 'days':
                        aVal = parseInt(a.dataset.days);
                        bVal = parseInt(b.dataset.days);
                        return bVal - aVal; // Descending
                    default:
                        return 0;
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Checkbox change events
            document.querySelectorAll('.transaction-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActions);
            });

            // Sort radio buttons
            document.getElementById('sortByDate').addEventListener('change', () => sortTable('date'));
            document.getElementById('sortByAmount').addEventListener('change', () => sortTable('amount'));
            document.getElementById('sortByDays').addEventListener('change', () => sortTable('days'));

            // Highlight critical overdue transactions
            document.querySelectorAll('tr[data-days]').forEach(row => {
                const days = parseInt(row.dataset.days);
                if (days > 30) {
                    row.classList.add('table-danger');
                } else if (days > 14) {
                    row.classList.add('table-warning');
                }
            });
        });

        // Auto-refresh every 10 minutes to check for changes
        setInterval(function() {
            fetch('@Url.Action("GetOverdueJson")')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const currentCount = document.querySelectorAll('.transaction-checkbox').length;
                        if (data.data.length !== currentCount) {
                            // Show notification that data has changed
                            const notification = document.createElement('div');
                            notification.className = 'alert alert-info alert-dismissible fade show position-fixed';
                            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                            notification.innerHTML = `
                                <i class="fas fa-refresh"></i>
                                <strong>Актуализация!</strong> Данните са променени.
                                <button type="button" class="btn btn-sm btn-outline-primary ms-2" onclick="location.reload()">
                                    Презареди
                                </button>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            `;
                            document.body.appendChild(notification);

                            // Auto-remove after 10 seconds
                            setTimeout(() => {
                                if (notification.parentNode) {
                                    notification.parentNode.removeChild(notification);
                                }
                            }, 10000);
                        }
                    }
                })
                .catch(error => console.log('Error checking for updates:', error));
        }, 600000); // 10 minutes
    </script>
}