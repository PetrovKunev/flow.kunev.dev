// <auto-generated />
using System;
using FlowKunevDev.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowKunevDev.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250625094604_ApplicationUserModel")]
    partial class ApplicationUserModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowKunevDev.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Accounts_UserId_Name_Unique");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.AccountTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("UserId", "Date")
                        .HasDatabaseName("IX_AccountTransfers_UserId_Date");

                    b.ToTable("AccountTransfers", t =>
                        {
                            t.HasCheckConstraint("CK_AccountTransfer_DifferentAccounts", "[FromAccountId] <> [ToAccountId]");
                        });
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "IsActive", "StartDate", "EndDate")
                        .HasDatabaseName("IX_Budgets_UserId_Active_Dates");

                    b.ToTable("Budgets", t =>
                        {
                            t.HasCheckConstraint("CK_Budget_ValidDateRange", "[StartDate] <= [EndDate]");
                        });
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Name_Unique");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ff6b6b",
                            Description = "Покупка на храна, ресторанти, доставки на храна",
                            Icon = "utensils",
                            IsActive = true,
                            Name = "Храна и ресторанти",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Color = "#4ecdc4",
                            Description = "Гориво, градски транспорт, такси, поддръжка на автомобил",
                            Icon = "car",
                            IsActive = true,
                            Name = "Транспорт",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "#45b7d1",
                            Description = "Дрехи, електроника, подаръци, различни покупки",
                            Icon = "shopping-bag",
                            IsActive = true,
                            Name = "Пазаруване",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Color = "#f9ca24",
                            Description = "Кино, театър, игри, спорт, хобита, излизания",
                            Icon = "gamepad-2",
                            IsActive = true,
                            Name = "Развлечения",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Color = "#f0932b",
                            Description = "Ток, вода, газ, интернет, телефон, наем, ТВ",
                            Icon = "zap",
                            IsActive = true,
                            Name = "Сметки и комунални услуги",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Color = "#eb4d4b",
                            Description = "Лекар, лекарства, болница, дентален преглед, очила",
                            Icon = "heart",
                            IsActive = true,
                            Name = "Здравеопазване",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Color = "#6c5ce7",
                            Description = "Курсове, книги, обучения, университет, сертификати",
                            Icon = "book",
                            IsActive = true,
                            Name = "Образование",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Color = "#a29bfe",
                            Description = "Почистване, поддръжка, мебели, домакински стоки",
                            Icon = "home",
                            IsActive = true,
                            Name = "Домакинство",
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Color = "#fd79a8",
                            Description = "Автомобилна, домашна, здравна, живот застраховка",
                            Icon = "shield",
                            IsActive = true,
                            Name = "Застраховки",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Color = "#fdcb6e",
                            Description = "Дрехи, обувки, чанти, бижута, часовници",
                            Icon = "shirt",
                            IsActive = true,
                            Name = "Облекло и аксесоари",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Color = "#e17055",
                            Description = "Фризьор, козметика, SPA, маникюр, педикюр",
                            Icon = "sparkles",
                            IsActive = true,
                            Name = "Красота и грижи",
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Color = "#00cec9",
                            Description = "Храна за животни, ветеринар, играчки, грижи",
                            Icon = "heart-hand",
                            IsActive = true,
                            Name = "Домашни любимци",
                            Type = 2
                        },
                        new
                        {
                            Id = 20,
                            Color = "#00b894",
                            Description = "Основна месечна заплата, бонуси, надбавки",
                            Icon = "briefcase",
                            IsActive = true,
                            Name = "Заплата",
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            Color = "#00cec9",
                            Description = "Фрийланс проекти, консултации, временна работа",
                            Icon = "laptop",
                            IsActive = true,
                            Name = "Свободна практика",
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            Color = "#81ecec",
                            Description = "Дивиденти, печалби от акции, лихви от депозити",
                            Icon = "trending-up",
                            IsActive = true,
                            Name = "Инвестиции и лихви",
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            Color = "#74b9ff",
                            Description = "Получени подаръци в пари, наследства",
                            Icon = "gift",
                            IsActive = true,
                            Name = "Подаръци",
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            Color = "#a29bfe",
                            Description = "Връщане на заеми, възстановени разходи, гаранции",
                            Icon = "refresh-cw",
                            IsActive = true,
                            Name = "Възстановявания",
                            Type = 1
                        },
                        new
                        {
                            Id = 25,
                            Color = "#fd79a8",
                            Description = "Продажба на стоки, услуги, имущество",
                            Icon = "tag",
                            IsActive = true,
                            Name = "Продажби",
                            Type = 1
                        },
                        new
                        {
                            Id = 26,
                            Color = "#fdcb6e",
                            Description = "Спечелени награди, премии, състезания",
                            Icon = "trophy",
                            IsActive = true,
                            Name = "Награди и премии",
                            Type = 1
                        },
                        new
                        {
                            Id = 27,
                            Color = "#e17055",
                            Description = "Приходи от наем на имот, рента, авторски права",
                            Icon = "building",
                            IsActive = true,
                            Name = "Наем и рента",
                            Type = 1
                        },
                        new
                        {
                            Id = 90,
                            Color = "#636e72",
                            Description = "Други некатегоризирани приходи и разходи",
                            Icon = "more-horizontal",
                            IsActive = true,
                            Name = "Друго",
                            Type = 3
                        },
                        new
                        {
                            Id = 91,
                            Color = "#2d3436",
                            Description = "Прехвърляне на средства между собствени сметки",
                            Icon = "arrow-right-left",
                            IsActive = true,
                            Name = "Трансфер между сметки",
                            Type = 3
                        });
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.PlannedTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ExecutedTransactionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PlannedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecurrenceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExecutedTransactionId");

                    b.HasIndex("UserId", "Status", "PlannedDate")
                        .HasDatabaseName("IX_PlannedTransactions_UserId_Status_PlannedDate");

                    b.HasIndex(new[] { "UserId", "PlannedDate" }, "IX_PlannedTransactions_UserId_PlannedDate");

                    b.ToTable("PlannedTransactions");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("AccountId", "Date")
                        .HasDatabaseName("IX_Transactions_AccountId_Date");

                    b.HasIndex("UserId", "Date")
                        .HasDatabaseName("IX_Transactions_UserId_Date");

                    b.HasIndex(new[] { "AccountId", "Date" }, "IX_Transactions_AccountId_Date");

                    b.HasIndex(new[] { "UserId", "Date" }, "IX_Transactions_UserId_Date");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.AccountTransfer", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.Account", "FromAccount")
                        .WithMany("TransfersFrom")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowKunevDev.Data.Models.Account", "ToAccount")
                        .WithMany("TransfersTo")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Budget", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.Category", "Category")
                        .WithMany("Budgets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.PlannedTransaction", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.Account", "Account")
                        .WithMany("PlannedTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowKunevDev.Data.Models.Category", "Category")
                        .WithMany("PlannedTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowKunevDev.Data.Models.Transaction", "ExecutedTransaction")
                        .WithMany()
                        .HasForeignKey("ExecutedTransactionId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("ExecutedTransaction");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Transaction", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowKunevDev.Data.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowKunevDev.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlowKunevDev.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Account", b =>
                {
                    b.Navigation("PlannedTransactions");

                    b.Navigation("Transactions");

                    b.Navigation("TransfersFrom");

                    b.Navigation("TransfersTo");
                });

            modelBuilder.Entity("FlowKunevDev.Data.Models.Category", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("PlannedTransactions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
